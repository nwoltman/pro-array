# ProArray

Extends the functionality of Arrays ([safely](#extending-array-prototype)) with several useful methods of unparalleled performance

[![NPM Version](https://img.shields.io/npm/v/pro-array.svg)](https://www.npmjs.com/package/pro-array)
[![Build Status](https://travis-ci.org/woollybogger/pro-array.svg?branch=master)](https://travis-ci.org/woollybogger/pro-array)
[![Coverage Status](https://coveralls.io/repos/woollybogger/pro-array/badge.svg?branch=master)](https://coveralls.io/r/woollybogger/pro-array?branch=master)
[![Dependency Status](https://david-dm.org/woollybogger/pro-array.svg)](https://david-dm.org/woollybogger/pro-array)
[![devDependency Status](https://david-dm.org/woollybogger/pro-array/dev-status.svg)](https://david-dm.org/woollybogger/pro-array#info=devDependencies)


## Installation

```sh
npm install pro-array --save
```

## Usage

```js
require('pro-array');
```

Requires [browserify](https://www.npmjs.com/package/browserify) to work in the browser.


# API Reference

{{>main}}

<br />

<a name="extending-array-prototype"></a>
# Extending `Array.prototype`

ProArray uses [`Object.defineProperties()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties) to safely extend the native Array prototype such that the added properties are not enumerable. This keeps native arrays clean and prevents [potential abnormalities](http://fireboltjs.com/prototype-extending/#enumerable_properties) when working with arrays.

#### Worried about naming collisions?

It is extremely unlikely that the name of any method that ProArray adds to the Array prototype will be used in a future ECMAScript standard, but if you're still worried and want to be extra safe, try using the alias methods:

+ [.diff()](#Array#diff) ⇒ [.difference()](#Array#difference)
+ [.rem()](#Array#rem) ⇒ [.remove()](#Array#remove)
+ [.uniq()](#Array#uniq) ⇒ [.unique()](#Array#unique)
